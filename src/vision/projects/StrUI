# âš¡ Projects: Strui (GUI Framework)

## What is this?
This is a sample project for use within the various "status quo" or "shiny future" stories.

## Description
Finally a Rust GUI Framework for the masses :)

It uses Streams as a way of Event Handling:
```rust
fn main() {
    let search_field = EditField::new();
    //we want to limit the amount of HTTP requests, so we throttle it to once a second
    search_field.key_pressed_handler(|s: dyn std::stream::Stream<Item = KeyEvent>| {
        s.throttle(1)
         .map(|e: KeyEvent| { Actions::UpdateAutocomplete})
    });

    let form_field = EditField::new();
    //Don't annoy the user with validation while he is typing. Delay it until 3 seconds after he's done.
    search_field.key_pressed_handler(|s: dyn std::stream::Stream<Item = KeyEvent>| {
        s.debounce(3)
         .map(|e: KeyEvent| { Actions::ValidateForm})
    });
}
```
This assumes we have something simmilar to [throttle](https://rxjs.dev/api/operators/throttle) and [debounce](https://rxjs.dev/api/operators/debounce).

## ðŸ¤” Frequently Asked Questions
* **What makes this project different from others?**
    - It uses Streams not just for waiting for something to finish/happen but actively uses them to *control when* something should happen.
    - This project exposes Streams in the API and is not just used internally.
    - We use Streams to signal events. In contrast to asynchronously reading data, there is a chance you might not be interested in
events from the past but only in events from the future. This is the difference between [hot and cold]https://blog.thoughtram.io/angular/2016/06/16/cold-vs-hot-observables.html] in Observables known in the JS world.
* **Does this project require a custom tailored runtime?**
    - Maybe. We don't have special requirements of the inner workings of the Runtime but we need to be able to
advance the Streams inside an external Event loop. This would require a ```fn tick()```function that ```poll``` `s all
the current awoken streams and immediately after gives control back so we can call ```tick()```again on the next iteration and poll tasks/streams that have been awoken by then.
    - Another important factor is that the Streams are providing the events in the order they are being performed by the user.
* **How much of this project is likely to be built with open source components from crates.io?**
    - This is meant as an open source framework so libraries it builds off of are open source as well.
* **What is of most concern to this project?**
    - API surface of Strui needs to be easy for the Developer to use.
    - Lag is critical. The time between a Stream is awakened and completely handled is important. Especially on events likely
 Drag & Drop
    - Cross-Platform support
* **What is of least concern to this project?**
    - Coming from UI Frameworks running in Browsers, Memory Consumption is not that important
